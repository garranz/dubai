#!/bin/bash

# Script to generate a single input file with specified HCP_DELTA, LEVEL, and NLAYERS parameters
# Usage: ./generate_dubai_config.sh <hcp_delta> <ground_level> <ground_nlayers> <building_level> <building_nlayers>
# Example: ./generate_dubai_config.sh 100 3 5,5,5 3 5,5,5
# Example: ./generate_dubai_config.sh 150 2 3,3,3 4 7,7,7

# Function to display usage
show_usage() {
    echo "Usage: $0 <hcp_delta> <ground_level> <ground_nlayers> <building_level> <building_nlayers>"
    echo ""
    echo "Parameters:"
    echo "  hcp_delta       : HCP_DELTA value (e.g., 100)"
    echo "  ground_level    : Ground LEVEL value (e.g., 3)"
    echo "  ground_nlayers  : Ground NLAYERS values comma-separated (e.g., 5,5,5)"
    echo "  building_level  : Building LEVEL value (e.g., 3)"
    echo "  building_nlayers: Building NLAYERS values comma-separated (e.g., 5,5,5)"
    echo ""
    echo "Example:"
    echo "  $0 100 3 5,5,5 3 5,5,5"
    echo "  $0 150 2 3,3,3 4 7,7,7"
    exit 1
}

# Check if correct number of arguments provided
if [ $# -ne 5 ]; then
    echo "Error: Incorrect number of arguments"
    echo ""
    show_usage
fi

# Assign command line arguments to variables
hcp_delta=$1
ground_level=$2
ground_nlayers=$3
building_level=$4
building_nlayers=$5

# Validate that hcp_delta is a number
if ! [[ "$hcp_delta" =~ ^[0-9]+$ ]]; then
    echo "Error: HCP_DELTA must be a positive integer"
    show_usage
fi

# Validate that levels are numbers
if ! [[ "$ground_level" =~ ^[0-9]+$ ]] || ! [[ "$building_level" =~ ^[0-9]+$ ]]; then
    echo "Error: LEVEL values must be positive integers"
    show_usage
fi

# Validate nlayers format (should be comma-separated numbers)
if ! [[ "$ground_nlayers" =~ ^[0-9]+(,[0-9]+)*$ ]] || ! [[ "$building_nlayers" =~ ^[0-9]+(,[0-9]+)*$ ]]; then
    echo "Error: NLAYERS must be comma-separated integers (e.g., 5,5,5)"
    show_usage
fi

# Create output directory if it doesn't exist
mkdir -p generated_configs
mkdir -p generated_configs/images

# Generate filename based on parameters
base_name="dubai_stl2_D${hcp_delta}_ground${ground_level}_building${building_level}"
input_file="generated_configs/${base_name}.in"

echo "----------------------------------------"
echo "Generating configuration file with:"
echo "  HCP_DELTA: $hcp_delta"
echo "  Ground: LEVEL=$ground_level, NLAYERS=$ground_nlayers"
echo "  Building: LEVEL=$building_level, NLAYERS=$building_nlayers"
echo "----------------------------------------"

# Create the input file with specified parameters
cat > "$input_file" << EOF
# Load the sbin generated by surfer
PART SURF SBIN ../surfer/dubai_V2.sbin #NO_SMOOTHING_CONSTRAINT
HCP_DELTA ${hcp_delta}   # size of the largest (background) elements. Recall that TIE 
                #width is 200
HCP_WINDOW FAZONE GROUND LEVEL ${ground_level} NLAYERS ${ground_nlayers}
HCP_WINDOW FAZONE BUILDINGS LEVEL ${building_level} NLAYERS ${building_nlayers}


#SKIP_SMALL_FACE_LOOP_CHECK
#SKIP_FACE_NODES

COUNT_POINTS    # forst stats
NSMOOTH 40      # smooth the initial point seeding 
WRITE_MLES ${base_name}.mles # save the resulting mesh
# Save a picutre of the mesh
WRITE_IMAGE NAME=images/${base_name}_z GEOM=PLANE 1000 1000 10 0 0 1 VAR=3d_mesh MESH_ON_SURFACE SIZE 4800 4800
WRITE_IMAGE NAME=images/${base_name}_y GEOM=PLANE 1000 1000 10 0 1 0 VAR=3d_mesh MESH_ON_SURFACE SIZE 4800 4800
WRITE_IMAGE NAME=images/${base_name}_x GEOM=PLANE 1000 1000 10 1 0 0 VAR=3d_mesh MESH_ON_SURFACE SIZE 4800 4800
WRITE_IMAGE NAME=images/${base_name}_z1 GEOM=PLANE 1000 1000 10 0 0 1 VAR=mesh MESH_ON_SURFACE SIZE 4800 4800
WRITE_IMAGE NAME=images/${base_name}_z2 GEOM=PLANE 1000 1000 200 0 0 1 VAR=mesh MESH_ON_SURFACE SIZE 4800 4800
WRITE_IMAGE NAME=images/${base_name}_z3 GEOM=PLANE 1000 1000 300 0 0 1 VAR=mesh MESH_ON_SURFACE SIZE 4800 4800
EOF

echo "âœ“ Generated: $input_file"
echo ""
echo "Output file location: $input_file"
echo "MLES file will be: ${base_name}.mles"
echo "Images will be saved with prefix: images/${base_name}_*"
